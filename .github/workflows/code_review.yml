#name: Code review
#
#concurrency:
#  group: ${{ github.workflow }}-${{ github.ref }}
#  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
#
#on:
#  workflow_dispatch:
#  push:
#    branches: [ main ]
#  pull_request:
#    types: [ opened, ready_for_review, synchronize ]
#    branches: [ main ]
#
#jobs:
#  SetUp:
#    runs-on: ubuntu-latest
#    steps:
#      - id: setVariables
#        name: Set variables
#        run: |
#          isFromMain=${{ github.ref == 'refs/heads/main' }}
#          isManual=${{ github.event_name == 'workflow_dispatch' }}
#          hasKmpLabel=${{ contains(github.event.pull_request.labels.*.name, 'KMP') }}
#          shouldRunKmp=false
#          if $isFromMain || $isManual || $hasKmpLabel ; then
#            shouldRunKmp=true
#          fi
#          echo "shouldRunKmp=$shouldRunKmp" >> "$GITHUB_OUTPUT"
#          echo "shouldRunAndroid=${{ contains(github.event.pull_request.labels.*.name, 'Android') }}" >> "$GITHUB_OUTPUT"
#          echo "shouldRunIos=${{ contains(github.event.pull_request.labels.*.name, 'iOS') }}" >> "$GITHUB_OUTPUT"
#
#          if [ ${{ github.event_name }} == workflow_dispatch ] || [ ${{ github.event_name }} == push ] || ([ ${{ github.event_name }} == pull_request ] && [ ${{ github.event.pull_request.draft }} == false ]); then
#            exit 0
#          else
#            exit 1
#          fi
#    outputs:
#      shouldRunKmp: ${{ steps.setVariables.outputs.shouldRunKmp }}
#      shouldRunAndroid: ${{ steps.setVariables.outputs.shouldRunAndroid }}
#      shouldRunIos: ${{ steps.setVariables.outputs.shouldRunIos }}
#
#  Build:
#    needs: SetUp
#    uses: ./.github/workflows/build.yml
#    with:
#      shouldRunKmp: ${{ needs.SetUp.outputs.shouldRunKmp }}
#      shouldRunAndroid: ${{ needs.SetUp.outputs.shouldRunAndroid }}
#      shouldRunIos: ${{ needs.SetUp.outputs.shouldRunIos }}
#
#  UnitTests:
#    needs: SetUp
#    uses: ./.github/workflows/test.yml
#    with:
#      shouldRunKmp: ${{ needs.SetUp.outputs.shouldRunKmp }}
#      shouldRunAndroid: ${{ needs.SetUp.outputs.shouldRunAndroid }}
#      shouldRunIos: ${{ needs.SetUp.outputs.shouldRunIos }}
#
#  AllowMerge:
#    if: always()
#    runs-on: ubuntu-latest
#    needs: [ Build, UnitTests ]
#    steps:
#      - run: |
#          if [ ${{ github.event_name }} == pull_request ] && [ ${{ join(github.event.pull_request.labels.*.name) == '' }} == true ]; then
#            exit 1
#          elif [ ${{ (contains(needs.Build.result, 'failure')) }} == true ] || [ ${{ (contains(needs.UnitTests.result, 'failure')) }} == true ]; then
#            exit 1
#          else
#            exit 0
#          fi
#
#  distribute:
#    name: Distribute bundle to Google Play
#    needs: [ Build, UnitTests ]
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Version Bump
#        uses: chkfung/android-version-actions@v1.2.3
#        with:
#          gradlePath: composeApp/build.gradle.kts
#          versionCode: ${{ github.run_number }}
#
#      - name: Assemble Release Bundle
#        run: ./gradlew bundleRelease
#
#      - name: Sign Release
#        uses: r0adkll/sign-android-release@v1
#        with:
#          releaseDirectory: composeApp/build/outputs/bundle/release
#          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE }}
#          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
#          alias: ${{ secrets.ANDROID_DEVS_ALIAS }}
#          keyPassword: ${{ secrets.ANDROID_DEVS_ALIAS_PASSWORD }}
#
#      - name: Setup Authorization with Google Play Store
#        run: echo '${{ secrets.PLAY_AUTH_JSON }}' > service_account.json
#
#      - name: Deploy bundle to Google Play
#        uses: r0adkll/upload-google-play@v1.1.3
#        with:
#          serviceAccountJson: service_account.json
#          packageName: com.joohnq.moodapp
#          releaseFiles: composeApp/build/outputs/bundle/release/Mood-v${{ github.run_number }}-release.aab
#          track: 'internal'
#          status: 'completed'
name: Deploy To Google Play

on:
  push:
    branches: [ main ]

jobs:
  test:
    name: Unit Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Grant execute permissions for gradlew
        run: chmod +x gradlew

      - name: Decode google-services.json
        run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > composeApp/google-services.json

  distribute:
    name: Distribute bundle to Google Play
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Version Bump
        uses: chkfung/android-version-actions@v1.2.3
        with:
          gradlePath: composeApp/build.gradle.kts
          versionCode: ${{ github.run_number }}

      - name: Assemble Release Bundle
        run: ./gradlew bundleRelease

      - name: Sign Release
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: composeApp/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          alias: ${{ secrets.ANDROID_DEVS_ALIAS }}
          keyPassword: ${{ secrets.ANDROID_DEVS_ALIAS_PASSWORD }}

      - name: Setup Authorization with Google Play Store
        run: echo '${{ secrets.PLAY_AUTH_JSON }}' > service_account.json

      - name: Deploy bundle to Google Play
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJson: service_account.json
          packageName: com.joohnq.moodapp
          releaseFiles: composeApp/build/outputs/bundle/release/Moodly-v${{ github.run_number }}-release.aab
          track: 'internal'
          status: 'completed'
